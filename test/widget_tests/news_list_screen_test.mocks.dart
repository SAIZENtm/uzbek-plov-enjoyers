// Mocks generated by Mockito 5.4.5 from annotations
// in newport_resident/test/widget_tests/news_list_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:cloud_firestore/cloud_firestore.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:newport_resident/core/models/news_article_model.dart' as _i8;
import 'package:newport_resident/core/services/api_service.dart' as _i2;
import 'package:newport_resident/core/services/cache_service.dart' as _i3;
import 'package:newport_resident/core/services/connectivity_service.dart'
    as _i5;
import 'package:newport_resident/core/services/logging_service_secure.dart' as _i4;
import 'package:newport_resident/core/services/news_service.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiService_0 extends _i1.SmartFake implements _i2.ApiService {
  _FakeApiService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCacheService_1 extends _i1.SmartFake implements _i3.CacheService {
  _FakeCacheService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoggingService_2 extends _i1.SmartFake
    implements _i4.LoggingService {
  _FakeLoggingService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectivityService_3 extends _i1.SmartFake
    implements _i5.ConnectivityService {
  _FakeConnectivityService_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NewsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsService extends _i1.Mock implements _i6.NewsService {
  MockNewsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiService get apiService => (super.noSuchMethod(
        Invocation.getter(#apiService),
        returnValue: _FakeApiService_0(
          this,
          Invocation.getter(#apiService),
        ),
      ) as _i2.ApiService);

  @override
  _i3.CacheService get cacheService => (super.noSuchMethod(
        Invocation.getter(#cacheService),
        returnValue: _FakeCacheService_1(
          this,
          Invocation.getter(#cacheService),
        ),
      ) as _i3.CacheService);

  @override
  _i4.LoggingService get loggingService => (super.noSuchMethod(
        Invocation.getter(#loggingService),
        returnValue: _FakeLoggingService_2(
          this,
          Invocation.getter(#loggingService),
        ),
      ) as _i4.LoggingService);

  @override
  _i5.ConnectivityService get connectivityService => (super.noSuchMethod(
        Invocation.getter(#connectivityService),
        returnValue: _FakeConnectivityService_3(
          this,
          Invocation.getter(#connectivityService),
        ),
      ) as _i5.ConnectivityService);

  @override
  _i7.Stream<List<_i8.NewsArticle>> get newsStream => (super.noSuchMethod(
        Invocation.getter(#newsStream),
        returnValue: _i7.Stream<List<_i8.NewsArticle>>.empty(),
      ) as _i7.Stream<List<_i8.NewsArticle>>);

  @override
  _i7.Future<List<_i8.NewsArticle>> fetchLatestNews(
          {bool? forceRefresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchLatestNews,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue:
            _i7.Future<List<_i8.NewsArticle>>.value(<_i8.NewsArticle>[]),
      ) as _i7.Future<List<_i8.NewsArticle>>);

  @override
  _i7.Future<List<_i8.NewsArticle>> fetchNewsWithPagination({
    _i9.DocumentSnapshot<Object?>? startAfterDocument,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNewsWithPagination,
          [],
          {
            #startAfterDocument: startAfterDocument,
            #limit: limit,
          },
        ),
        returnValue:
            _i7.Future<List<_i8.NewsArticle>>.value(<_i8.NewsArticle>[]),
      ) as _i7.Future<List<_i8.NewsArticle>>);

  @override
  _i7.Future<_i8.NewsArticle?> fetchNewsById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchNewsById,
          [id],
        ),
        returnValue: _i7.Future<_i8.NewsArticle?>.value(),
      ) as _i7.Future<_i8.NewsArticle?>);

  @override
  _i7.Stream<List<_i8.NewsArticle>> getNewsStream({int? limit = 20}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewsStream,
          [],
          {#limit: limit},
        ),
        returnValue: _i7.Stream<List<_i8.NewsArticle>>.empty(),
      ) as _i7.Stream<List<_i8.NewsArticle>>);
}
