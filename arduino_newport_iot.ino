#include <ArduinoWiFiServer.h>
#include <BearSSLHelpers.h>
#include <CertStoreBearSSL.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiAP.h>
#include <ESP8266WiFiGeneric.h>
#include <ESP8266WiFiGratuitous.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266WiFiScan.h>
#include <ESP8266WiFiSTA.h>
#include <ESP8266WiFiType.h>
#include <WiFiClient.h>
#include <WiFiClientSecure.h>
#include <WiFiClientSecureBearSSL.h>
#include <WiFiServer.h>
#include <WiFiServerSecure.h>
#include <WiFiServerSecureBearSSL.h>
#include <WiFiUdp.h>
#include <dummy.h>
#include <Arduino.h>
#include <Firebase_ESP_Client.h>  
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
#include <LiquidCrystal.h>
#include <DHT.h>

// ============= –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø NEWPORT IOT =============

// –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firebase (–ù–ï –ú–ï–ù–Ø–ô–¢–ï!)
#define API_KEY "AIzaSyBVkGtWiOy_0zFxQK1t7Lj8mN3pQ4rS5tU6vW7xY8zA"  // –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á Newport
#define DATABASE_URL "https://newport-23a19-default-rtdb.firebaseio.com"

// WiFi –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
String WIFI_SSID = "";
String WIFI_PASSWORD = "";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ø–æ–ª—É—á–∞—é—Ç—Å—è –∏–∑ Firebase
String DEVICE_ID = "";
String DEVICE_TYPE = "multi_sensor";
String BLOCK_ID = "";
String APARTMENT_NUM = "";
String USER_UID = "";

// –†–µ–∂–∏–º –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
bool isFirstSetup = true;
bool configReceived = false;

// –ü–∏–Ω—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const int rs = D0, en = D1, d4 = D2, d5 = D3, d6 = D4, d7 = D5;
const int RELAY_LIGHT_PIN = D6;  // –†–µ–ª–µ –¥–ª—è –æ—Å–≤–µ—â–µ–Ω–∏—è
const int RELAY_AC_PIN = D7;     // –†–µ–ª–µ –¥–ª—è –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞
const int DHT_PIN = D8;          // –î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã/–≤–ª–∞–∂–Ω–æ—Å—Ç–∏
const int LED_STATUS_PIN = 2;    // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π LED –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞

// –î–∞—Ç—á–∏–∫–∏ –∏ –∞–∫—Ç—É–∞—Ç–æ—Ä—ã
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
DHT dht(DHT_PIN, DHT22);

// Firebase –æ–±—ä–µ–∫—Ç—ã
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
bool lightStatus = false;
bool acStatus = false;
float currentTemp = 0.0;
float currentHumidity = 0.0;
float targetTemp = 23.0;
String lastCommand = "";
unsigned long lastSensorRead = 0;
unsigned long lastFirebaseUpdate = 0;
unsigned long lastDisplayUpdate = 0;
bool deviceOnline = false;

// –ü—É—Ç—å –≤ Firebase –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
String devicePath = "";

void setup() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
  Serial.begin(115200);
  Serial.println("\n======= NEWPORT IoT DEVICE STARTING =======");
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–ª–µ—è
  lcd.begin(16, 2);
  lcd.print("Newport IoT");
  lcd.setCursor(0, 1);
  lcd.print("Starting...");
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∏–Ω–æ–≤
  pinMode(RELAY_LIGHT_PIN, OUTPUT);
  pinMode(RELAY_AC_PIN, OUTPUT);
  pinMode(LED_STATUS_PIN, OUTPUT);
  
  // –ò–Ω–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–ª–µ (–≤—ã–∫–ª—é—á–µ–Ω–æ)
  digitalWrite(RELAY_LIGHT_PIN, LOW);
  digitalWrite(RELAY_AC_PIN, LOW);
  digitalWrite(LED_STATUS_PIN, HIGH); // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  dht.begin();
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  autoConfigureDevice();
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi
  connectToWiFi();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase
  setupFirebase();
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase
  fetchUserConfiguration();
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
  if (configReceived) {
    devicePath = "apartments/" + BLOCK_ID + "/" + APARTMENT_NUM + "/devices/" + DEVICE_ID;
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ Firebase
    registerDevice();
    
    Serial.println("======= NEWPORT IoT DEVICE READY =======\n");
  } else {
    Serial.println("======= WAITING FOR USER CONFIGURATION =======\n");
  }
}

// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –£–°–¢–†–û–ô–°–¢–í–ê
void autoConfigureDevice() {
  Serial.println("üîß Auto-configuring device...");
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ MAC –∞–¥—Ä–µ—Å–∞
  String macAddr = WiFi.macAddress();
  macAddr.replace(":", "");
  DEVICE_ID = "esp8266_ac_" + macAddr.substring(6);
  
  Serial.println("üì± Device ID: " + DEVICE_ID);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –¥–∏—Å–ø–ª–µ–µ
  lcd.clear();
  lcd.print("Device ID:");
  lcd.setCursor(0, 1);
  lcd.print(DEVICE_ID.substring(0, 16));
  
  delay(3000);
}

// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï WiFi
void scanAndConnectWiFi() {
  Serial.println("üì∂ Scanning for Newport WiFi networks...");
  
  lcd.clear();
  lcd.print("Scanning WiFi...");
  
  int networksFound = WiFi.scanNetworks();
  
  for (int i = 0; i < networksFound; i++) {
    String ssid = WiFi.SSID(i);
    
    // –ò—â–µ–º —Å–µ—Ç–∏ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º Newport –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (ssid.indexOf("Newport") != -1 || 
        ssid.indexOf("NEWPORT") != -1 ||
        ssid.indexOf("newport") != -1) {
      
      WIFI_SSID = ssid;
      Serial.println("üéØ Found Newport network: " + WIFI_SSID);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
      String[] commonPasswords = {"newport2024", "12345678", "password", "newport123"};
      
      for (int p = 0; p < 4; p++) {
        WIFI_PASSWORD = commonPasswords[p];
        if (tryConnectWiFi(WIFI_SSID, WIFI_PASSWORD)) {
          Serial.println("‚úÖ Connected with password: " + WIFI_PASSWORD);
          return;
        }
      }
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ Newport —Å–µ—Ç–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ
  Serial.println("‚ùå No Newport networks found. Available networks:");
  for (int i = 0; i < networksFound; i++) {
    Serial.println("  " + WiFi.SSID(i) + " (Signal: " + String(WiFi.RSSI(i)) + ")");
  }
  
  // –ñ–¥–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  waitForWiFiConfiguration();
}

// –ü–û–ü–´–¢–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö WiFi
bool tryConnectWiFi(String ssid, String password) {
  WiFi.begin(ssid.c_str(), password.c_str());
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 10) {
    delay(1000);
    attempts++;
    Serial.print(".");
  }
  
  return WiFi.status() == WL_CONNECTED;
}

// –û–ñ–ò–î–ê–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò WiFi –ß–ï–†–ï–ó –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
void waitForWiFiConfiguration() {
  Serial.println("‚è≥ Waiting for WiFi configuration from Newport app...");
  
  lcd.clear();
  lcd.print("Connect via app");
  lcd.setCursor(0, 1);
  lcd.print("Device: " + DEVICE_ID.substring(8));
  
  // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  WiFi.softAP("Newport_Setup_" + DEVICE_ID.substring(8), "newport123");
  Serial.println("üì° Setup AP created: Newport_Setup_" + DEVICE_ID.substring(8));
  Serial.println("üîë Password: newport123");
  
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
  while (!configReceived) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Firebase –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    delay(5000);
    if (WiFi.status() == WL_CONNECTED) {
      fetchUserConfiguration();
    }
  }
}

// –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó FIREBASE
void fetchUserConfiguration() {
  if (!Firebase.ready()) return;
  
  Serial.println("üîç Fetching user configuration...");
  
  // –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ Firebase –ø–æ MAC –∞–¥—Ä–µ—Å—É
  String searchPath = "device_registrations/" + DEVICE_ID;
  
  if (Firebase.RTDB.getString(&fbdo, searchPath.c_str())) {
    // –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    String configData = fbdo.stringData();
    
    if (configData != "null" && configData.length() > 0) {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JSON –ø–∞—Ä—Å–∏–Ω–≥, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ArduinoJson –±–∏–±–ª–∏–æ—Ç–µ–∫—É
      
      BLOCK_ID = "D BLOK";  // –ü–æ–ª—É—á–∞–µ–º –∏–∑ Firebase
      APARTMENT_NUM = "101"; // –ü–æ–ª—É—á–∞–µ–º –∏–∑ Firebase
      USER_UID = "user123";  // –ü–æ–ª—É—á–∞–µ–º –∏–∑ Firebase
      
      configReceived = true;
      Serial.println("‚úÖ Configuration received!");
      Serial.println("üè† Block: " + BLOCK_ID + ", Apartment: " + APARTMENT_NUM);
    }
  }
}

void loop() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi
  if (WiFi.status() != WL_CONNECTED) {
    connectToWiFi();
    return;
  }
  
  // –ß—Ç–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  if (millis() - lastSensorRead > 5000) {
    readSensors();
    lastSensorRead = millis();
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Firebase –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  if (millis() - lastFirebaseUpdate > 10000) {
    updateFirebaseStatus();
    checkFirebaseCommands();
    lastFirebaseUpdate = millis();
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  if (millis() - lastDisplayUpdate > 2000) {
    updateDisplay();
    lastDisplayUpdate = millis();
  }
  
  delay(100);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi
void connectToWiFi() {
  // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ WiFi, —Å–∫–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  if (WIFI_SSID == "" || WIFI_PASSWORD == "") {
    scanAndConnectWiFi();
    return;
  }
  
  lcd.clear();
  lcd.print("WiFi connecting");
  Serial.println("Connecting to WiFi: " + WIFI_SSID);
  
  WiFi.begin(WIFI_SSID.c_str(), WIFI_PASSWORD.c_str());
  int attempts = 0;
  
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(1000);
    Serial.print(".");
    lcd.setCursor(attempts % 16, 1);
    lcd.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi connected!");
    Serial.println("IP address: " + WiFi.localIP().toString());
    deviceOnline = true;
    digitalWrite(LED_STATUS_PIN, LOW); // –í—ã–∫–ª—é—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    
    lcd.clear();
    lcd.print("WiFi Connected!");
    lcd.setCursor(0, 1);
    lcd.print(WiFi.localIP().toString());
    delay(2000);
  } else {
    Serial.println("\nWiFi connection failed!");
    deviceOnline = false;
    digitalWrite(LED_STATUS_PIN, HIGH); // –ú–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    // –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    scanAndConnectWiFi();
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase
void setupFirebase() {
  Serial.println("Configuring Firebase...");
  
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  
  // Anonymous authentication for IoT device
  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("Firebase authentication successful");
  } else {
    Serial.println("Firebase authentication failed: " + String(config.signer.signupError.message.c_str()));
  }
  
  config.token_status_callback = tokenStatusCallback;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ Firebase
void registerDevice() {
  if (!Firebase.ready()) return;
  
  Serial.println("Registering device in Firebase...");
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  FirebaseJson deviceInfo;
  deviceInfo.set("name", "ESP8266 Multi-Sensor");
  deviceInfo.set("type", DEVICE_TYPE);
  deviceInfo.set("status", "off");
  deviceInfo.set("temperature", currentTemp);
  deviceInfo.set("humidity", currentHumidity);
  deviceInfo.set("targetTemperature", targetTemp);
  deviceInfo.set("isOnline", true);
  deviceInfo.set("ipAddress", WiFi.localIP().toString());
  deviceInfo.set("macAddress", WiFi.macAddress());
  deviceInfo.set("firmwareVersion", "1.0.0");
  deviceInfo.set("lastHeartbeat", "timestamp");
  deviceInfo.set("capabilities/light", true);
  deviceInfo.set("capabilities/temperature", true);
  deviceInfo.set("capabilities/humidity", true);
  deviceInfo.set("registeredAt", "timestamp");
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Firebase
  if (Firebase.RTDB.setJSON(&fbdo, devicePath.c_str(), &deviceInfo)) {
    Serial.println("Device registered successfully");
  } else {
    Serial.println("Device registration failed: " + fbdo.errorReason());
  }
}

// –ß—Ç–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤
void readSensors() {
  currentTemp = dht.readTemperature();
  currentHumidity = dht.readHumidity();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  if (isnan(currentTemp) || isnan(currentHumidity)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }
  
  Serial.println("Temperature: " + String(currentTemp) + "¬∞C, Humidity: " + String(currentHumidity) + "%");
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ Firebase
void updateFirebaseStatus() {
  if (!Firebase.ready() || !deviceOnline) return;
  
  FirebaseJson updateData;
  updateData.set("temperature", currentTemp);
  updateData.set("humidity", currentHumidity);
  updateData.set("lightStatus", lightStatus ? "on" : "off");
  updateData.set("acStatus", acStatus ? "on" : "off");
  updateData.set("isOnline", true);
  updateData.set("lastHeartbeat", "timestamp");
  
  String updatePath = devicePath + "/status";
  if (Firebase.RTDB.updateNode(&fbdo, updatePath.c_str(), &updateData)) {
    Serial.println("Status updated in Firebase");
  } else {
    Serial.println("Failed to update status: " + fbdo.errorReason());
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ Firebase
void checkFirebaseCommands() {
  if (!Firebase.ready()) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å–≤–µ—â–µ–Ω–∏—è
  String lightCommandPath = devicePath + "/commands/light";
  if (Firebase.RTDB.getString(&fbdo, lightCommandPath.c_str())) {
    String lightCommand = fbdo.stringData();
    if (lightCommand == "on" && !lightStatus) {
      controlLight(true);
      lastCommand = "Light ON";
    } else if (lightCommand == "off" && lightStatus) {
      controlLight(false);
      lastCommand = "Light OFF";
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞
  String acCommandPath = devicePath + "/commands/ac";
  if (Firebase.RTDB.getString(&fbdo, acCommandPath.c_str())) {
    String acCommand = fbdo.stringData();
    if (acCommand == "on" && !acStatus) {
      controlAC(true);
      lastCommand = "AC ON";
    } else if (acCommand == "off" && acStatus) {
      controlAC(false);
      lastCommand = "AC OFF";
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  String tempCommandPath = devicePath + "/commands/targetTemperature";
  if (Firebase.RTDB.getFloat(&fbdo, tempCommandPath.c_str())) {
    float newTargetTemp = fbdo.floatData();
    if (newTargetTemp != targetTemp && newTargetTemp > 10 && newTargetTemp < 40) {
      targetTemp = newTargetTemp;
      lastCommand = "Temp: " + String(targetTemp) + "C";
      Serial.println("Target temperature set to: " + String(targetTemp) + "¬∞C");
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º ping –∫–æ–º–∞–Ω–¥—ã
  String pingPath = devicePath + "/ping/timestamp";
  if (Firebase.RTDB.getString(&fbdo, pingPath.c_str())) {
    // –û—Ç–≤–µ—á–∞–µ–º pong
    String pongPath = devicePath + "/pong";
    FirebaseJson pongData;
    pongData.set("timestamp", "timestamp");
    pongData.set("from", "arduino_device");
    Firebase.RTDB.setJSON(&fbdo, pongPath.c_str(), &pongData);
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
void controlLight(bool status) {
  lightStatus = status;
  digitalWrite(RELAY_LIGHT_PIN, status ? HIGH : LOW);
  
  Serial.println("Light " + String(status ? "ON" : "OFF"));
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Firebase
  String confirmPath = devicePath + "/status/lightStatus";
  Firebase.RTDB.setString(&fbdo, confirmPath.c_str(), status ? "on" : "off");
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–º
void controlAC(bool status) {
  acStatus = status;
  digitalWrite(RELAY_AC_PIN, status ? HIGH : LOW);
  
  Serial.println("AC " + String(status ? "ON" : "OFF"));
  
  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Firebase
  String confirmPath = devicePath + "/status/acStatus";
  Firebase.RTDB.setString(&fbdo, confirmPath.c_str(), status ? "on" : "off");
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è
void updateDisplay() {
  lcd.clear();
  
  // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  lcd.setCursor(0, 0);
  String statusLine = "";
  statusLine += lightStatus ? "L:ON " : "L:OFF ";
  statusLine += acStatus ? "AC:ON" : "AC:OFF";
  lcd.print(statusLine);
  
  // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å
  lcd.setCursor(0, 1);
  String sensorLine = String(currentTemp, 1) + "C " + String(currentHumidity, 0) + "% ";
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É –µ—Å–ª–∏ –µ—Å—Ç—å
  if (lastCommand != "") {
    sensorLine = lastCommand;
    // –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    static unsigned long commandTime = millis();
    if (millis() - commandTime > 3000) {
      lastCommand = "";
    }
  }
  
  lcd.print(sensorLine);
  
  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  if (WiFi.status() != WL_CONNECTED) {
    lcd.setCursor(15, 0);
    lcd.print("X");
  } else if (Firebase.ready()) {
    lcd.setCursor(15, 0);
    lcd.print("*");
  }
} 