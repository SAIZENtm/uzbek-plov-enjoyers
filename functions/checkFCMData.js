const functions = require('firebase-functions');
const admin = require('firebase-admin');

exports.checkFCMData = functions.https.onRequest(async (req, res) => {
  const db = admin.firestore();
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ FCM —Ç–æ–∫–µ–Ω–æ–≤ –≤ Firebase...');
    let result = 'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ FCM —Ç–æ–∫–µ–Ω–æ–≤ –≤ Firebase...\n';
    result += '='.repeat(60) + '\n\n';

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é fcm_tokens
    result += 'üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é fcm_tokens:\n';
    const fcmTokensSnapshot = await db.collection('fcm_tokens').get();
    result += `   –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${fcmTokensSnapshot.size}\n`;
    
    if (fcmTokensSnapshot.size > 0) {
      fcmTokensSnapshot.forEach(doc => {
        const data = doc.data();
        result += `   üìû ID: ${doc.id}\n`;
        result += `   üì± –¢–æ–∫–µ–Ω–æ–≤: ${data.tokens?.length || 0}\n`;
        result += `   üìÑ –ü–∞—Å–ø–æ—Ä—Ç: ${data.passportNumber || 'N/A'}\n`;
        result += `   üè† –ë–ª–æ–∫: ${data.blockId || 'N/A'}\n`;
        result += `   üö™ –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${data.apartmentNumber || 'N/A'}\n`;
        result += `   ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.lastTokenUpdate?.toDate?.() || 'N/A'}\n`;
        result += '   ' + '-'.repeat(40) + '\n';
      });
    } else {
      result += '   ‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n';
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é users
    result += '\nüë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é users:\n';
    const usersSnapshot = await db.collection('users').get();
    result += `   –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${usersSnapshot.size}\n`;
    
    let usersWithTokens = 0;
    if (usersSnapshot.size > 0) {
      usersSnapshot.forEach(doc => {
        const data = doc.data();
        if (data.fcmTokens && data.fcmTokens.length > 0) {
          usersWithTokens++;
          result += `   üìÑ ID: ${doc.id}\n`;
          result += `   üì± FCM —Ç–æ–∫–µ–Ω–æ–≤: ${data.fcmTokens?.length || 0}\n`;
          result += `   üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone || 'N/A'}\n`;
          result += `   üè† –ë–ª–æ–∫: ${data.blockId || 'N/A'}\n`;
          result += `   üö™ –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${data.apartmentNumber || 'N/A'}\n`;
          result += `   ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.lastTokenUpdate?.toDate?.() || 'N/A'}\n`;
          result += '   ' + '-'.repeat(40) + '\n';
        }
      });
    }
    
    if (usersWithTokens === 0) {
      result += '   ‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã —Å FCM —Ç–æ–∫–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n';
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result += '\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è AA2807040:\n';
    const userDoc = await db.collection('users').doc('AA2807040').get();
    if (userDoc.exists) {
      const data = userDoc.data();
      result += `   üì± FCM —Ç–æ–∫–µ–Ω–æ–≤: ${data.fcmTokens?.length || 0}\n`;
      result += `   üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone || 'N/A'}\n`;
      result += `   ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.lastTokenUpdate?.toDate?.() || 'N/A'}\n`;
    } else {
      result += '   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å AA2807040 –Ω–µ –Ω–∞–π–¥–µ–Ω\n';
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 998952354500
    result += '\nüìû –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 998952354500:\n';
    const phoneDoc = await db.collection('fcm_tokens').doc('998952354500').get();
    if (phoneDoc.exists) {
      const data = phoneDoc.data();
      result += `   üì± –¢–æ–∫–µ–Ω–æ–≤: ${data.tokens?.length || 0}\n`;
      result += `   üìÑ –ü–∞—Å–ø–æ—Ä—Ç: ${data.passportNumber || 'N/A'}\n`;
      result += `   ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.lastTokenUpdate?.toDate?.() || 'N/A'}\n`;
    } else {
      result += '   ‚ùå –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 998952354500 –Ω–µ –Ω–∞–π–¥–µ–Ω\n';
    }

    result += '\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n';
    
    res.set('Content-Type', 'text/plain; charset=utf-8');
    res.send(result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).send(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}); 