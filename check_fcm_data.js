const admin = require('firebase-admin');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Firebase Admin
if (!admin.apps.length) {
  admin.initializeApp();
}

const db = admin.firestore();

async function checkFCMData() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ FCM —Ç–æ–∫–µ–Ω–æ–≤ –≤ Firebase...');
  console.log('=' .repeat(60));

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é fcm_tokens
    console.log('\nüì± –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é fcm_tokens:');
    const fcmTokensSnapshot = await db.collection('fcm_tokens').get();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${fcmTokensSnapshot.size}`);
    
    if (fcmTokensSnapshot.size > 0) {
      fcmTokensSnapshot.forEach(doc => {
        const data = doc.data();
        console.log(`   üìû ID: ${doc.id}`);
        console.log(`   üì± –¢–æ–∫–µ–Ω–æ–≤: ${data.tokens?.length || 0}`);
        console.log(`   üìÑ –ü–∞—Å–ø–æ—Ä—Ç: ${data.passportNumber || 'N/A'}`);
        console.log(`   üè† –ë–ª–æ–∫: ${data.blockId || 'N/A'}`);
        console.log(`   üö™ –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${data.apartmentNumber || 'N/A'}`);
        console.log(`   ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.lastTokenUpdate?.toDate?.() || 'N/A'}`);
        console.log('   ' + '-'.repeat(40));
      });
    } else {
      console.log('   ‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é users
    console.log('\nüë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é users:');
    const usersSnapshot = await db.collection('users').get();
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${usersSnapshot.size}`);
    
    if (usersSnapshot.size > 0) {
      usersSnapshot.forEach(doc => {
        const data = doc.data();
        if (data.fcmTokens && data.fcmTokens.length > 0) {
          console.log(`   üìÑ ID: ${doc.id}`);
          console.log(`   üì± FCM —Ç–æ–∫–µ–Ω–æ–≤: ${data.fcmTokens?.length || 0}`);
          console.log(`   üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone || 'N/A'}`);
          console.log(`   üè† –ë–ª–æ–∫: ${data.blockId || 'N/A'}`);
          console.log(`   üö™ –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${data.apartmentNumber || 'N/A'}`);
          console.log(`   ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.lastTokenUpdate?.toDate?.() || 'N/A'}`);
          console.log('   ' + '-'.repeat(40));
        }
      });
    } else {
      console.log('   ‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã —Å FCM —Ç–æ–∫–µ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è AA2807040:');
    const userDoc = await db.collection('users').doc('AA2807040').get();
    if (userDoc.exists) {
      const data = userDoc.data();
      console.log(`   üì± FCM —Ç–æ–∫–µ–Ω–æ–≤: ${data.fcmTokens?.length || 0}`);
      console.log(`   üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone || 'N/A'}`);
      console.log(`   ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.lastTokenUpdate?.toDate?.() || 'N/A'}`);
    } else {
      console.log('   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å AA2807040 –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 998952354500
    console.log('\nüìû –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 998952354500:');
    const phoneDoc = await db.collection('fcm_tokens').doc('998952354500').get();
    if (phoneDoc.exists) {
      const data = phoneDoc.data();
      console.log(`   üì± –¢–æ–∫–µ–Ω–æ–≤: ${data.tokens?.length || 0}`);
      console.log(`   üìÑ –ü–∞—Å–ø–æ—Ä—Ç: ${data.passportNumber || 'N/A'}`);
      console.log(`   ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${data.lastTokenUpdate?.toDate?.() || 'N/A'}`);
    } else {
      console.log('   ‚ùå –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 998952354500 –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

checkFCMData().then(() => {
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 