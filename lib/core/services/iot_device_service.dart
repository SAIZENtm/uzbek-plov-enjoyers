import 'dart:async';
import 'package:firebase_database/firebase_database.dart';
import 'package:network_info_plus/network_info_plus.dart';
import 'package:wifi_scan/wifi_scan.dart';
import '../models/smart_home_device_model.dart';
import 'auth_service.dart';
import 'logging_service_secure.dart';

/// –†–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Firebase Realtime Database –¥–ª—è —Å–≤—è–∑–∏ —Å Arduino ESP8266
class IoTDeviceService {
  final FirebaseDatabase _database = FirebaseDatabase.instance;
  final AuthService _authService;
  final LoggingService _loggingService;
  
  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  final Map<String, StreamController<SmartHomeDevice>> _deviceControllers = {};
  final Map<String, DatabaseReference> _deviceRefs = {};
  
  IoTDeviceService({
    required AuthService authService,
    required LoggingService loggingService,
  }) : _authService = authService,
       _loggingService = loggingService;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Firebase Realtime Database
  Future<void> initialize() async {
    try {
      _loggingService.info('üîó Initializing IoT Device Service...');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase Realtime Database
      _database.setPersistenceEnabled(true);
      
      _loggingService.info('‚úÖ IoT Device Service initialized successfully');
    } catch (e, stackTrace) {
      _loggingService.error('‚ùå Failed to initialize IoT Device Service', e, stackTrace);
    }
  }

  /// –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏
  Future<List<IoTDeviceInfo>> scanForDevices() async {
    try {
      _loggingService.info('üîç Scanning for IoT devices...');
      
      final devices = <IoTDeviceInfo>[];
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π WiFi —Å–µ—Ç–∏
      final networkInfo = NetworkInfo();
      final wifiName = await networkInfo.getWifiName();
      final wifiIP = await networkInfo.getWifiIP();
      
      _loggingService.info('üì∂ Current WiFi: $wifiName (IP: $wifiIP)');
      
      // –°–∫–∞–Ω–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ Firebase –ø–æ –ø—É—Ç–∏ /apartments/{blockId}/{apartmentNumber}/devices
      final apartment = _authService.verifiedApartment;
      if (apartment != null) {
        final devicesRef = _database.ref('apartments/${apartment.blockId}/${apartment.apartmentNumber}/devices');
        final snapshot = await devicesRef.get();
        
        if (snapshot.exists) {
          final devicesData = Map<String, dynamic>.from(snapshot.value as Map);
          
          for (final entry in devicesData.entries) {
            try {
              final deviceData = Map<String, dynamic>.from(entry.value as Map);
              final device = IoTDeviceInfo.fromMap(entry.key, deviceData);
              devices.add(device);
              _loggingService.info('üîå Found device: ${device.name} (${device.type})');
            } catch (e) {
              _loggingService.warning('‚ö†Ô∏è Failed to parse device: ${entry.key}');
            }
          }
        }
      }
      
      _loggingService.info('‚úÖ Found ${devices.length} IoT devices');
      return devices;
    } catch (e, stackTrace) {
      _loggingService.error('‚ùå Failed to scan for devices', e, stackTrace);
      return [];
    }
  }

  /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
  Future<bool> connectToDevice(String deviceId) async {
    try {
      _loggingService.info('üîó Connecting to device: $deviceId');
      
      final apartment = _authService.verifiedApartment;
      if (apartment == null) {
        throw Exception('No verified apartment');
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –≤ Firebase
      final devicePath = 'apartments/${apartment.blockId}/${apartment.apartmentNumber}/devices/$deviceId';
      final deviceRef = _database.ref(devicePath);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      final snapshot = await deviceRef.get();
      if (!snapshot.exists) {
        throw Exception('Device not found: $deviceId');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      _deviceRefs[deviceId] = deviceRef;
      
      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      final controller = StreamController<SmartHomeDevice>.broadcast();
      _deviceControllers[deviceId] = controller;
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      deviceRef.onValue.listen((event) {
        if (event.snapshot.exists) {
          try {
            final deviceData = Map<String, dynamic>.from(event.snapshot.value as Map);
            final device = SmartHomeDevice.fromJson({
              'id': deviceId,
              ...deviceData,
            });
            controller.add(device);
          } catch (e) {
            _loggingService.error('Failed to parse device update: $deviceId', e);
          }
        }
      });
      
      _loggingService.info('‚úÖ Connected to device: $deviceId');
      return true;
    } catch (e, stackTrace) {
      _loggingService.error('‚ùå Failed to connect to device: $deviceId', e, stackTrace);
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  Stream<SmartHomeDevice>? getDeviceStream(String deviceId) {
    return _deviceControllers[deviceId]?.stream;
  }

  /// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º - –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ
  Future<bool> controlDevice(String deviceId, bool status) async {
    try {
      _loggingService.info('üéõÔ∏è Controlling device $deviceId: ${status ? 'ON' : 'OFF'}');
      
      final deviceRef = _deviceRefs[deviceId];
      if (deviceRef == null) {
        throw Exception('Device not connected: $deviceId');
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ Firebase
      await deviceRef.update({
        'status': status ? 'on' : 'off',
        'lastCommand': DateTime.now().toIso8601String(),
        'commandedBy': _authService.userData?['fullName'] ?? 'User',
      });
      
      _loggingService.info('‚úÖ Device command sent: $deviceId');
      return true;
    } catch (e, stackTrace) {
      _loggingService.error('‚ùå Failed to control device: $deviceId', e, stackTrace);
      return false;
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª–µ–º
  Future<bool> setTemperature(String deviceId, double temperature) async {
    try {
      _loggingService.info('üå°Ô∏è Setting temperature for $deviceId: $temperature¬∞C');
      
      final deviceRef = _deviceRefs[deviceId];
      if (deviceRef == null) {
        throw Exception('Device not connected: $deviceId');
      }
      
      await deviceRef.update({
        'temperature': temperature,
        'lastCommand': DateTime.now().toIso8601String(),
        'commandedBy': _authService.userData?['fullName'] ?? 'User',
      });
      
      _loggingService.info('‚úÖ Temperature set: $deviceId');
      return true;
    } catch (e, stackTrace) {
      _loggingService.error('‚ùå Failed to set temperature: $deviceId', e, stackTrace);
      return false;
    }
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  Future<bool> addPhysicalDevice(IoTDeviceInfo deviceInfo) async {
    try {
      _loggingService.info('‚ûï Adding physical device: ${deviceInfo.name}');
      
      final apartment = _authService.verifiedApartment;
      if (apartment == null) {
        throw Exception('No verified apartment');
      }
      
      final devicePath = 'apartments/${apartment.blockId}/${apartment.apartmentNumber}/devices/${deviceInfo.id}';
      final deviceRef = _database.ref(devicePath);
      
      await deviceRef.set({
        'name': deviceInfo.name,
        'type': deviceInfo.type.id,
        'status': 'off',
        'ipAddress': deviceInfo.ipAddress,
        'macAddress': deviceInfo.macAddress,
        'firmwareVersion': deviceInfo.firmwareVersion,
        'isOnline': true,
        'addedAt': DateTime.now().toIso8601String(),
        'addedBy': _authService.userData?['fullName'] ?? 'User',
      });
      
      _loggingService.info('‚úÖ Physical device added: ${deviceInfo.name}');
      return true;
    } catch (e, stackTrace) {
      _loggingService.error('‚ùå Failed to add physical device', e, stackTrace);
      return false;
    }
  }

  /// –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ WiFi —Å–µ—Ç–µ–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  Future<List<WiFiAccessPoint>> scanWiFiNetworks() async {
    try {
      _loggingService.info('üì∂ Scanning WiFi networks...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      final can = await WiFiScan.instance.canStartScan(askPermissions: true);
      if (can != CanStartScan.yes) {
        throw Exception('Cannot scan WiFi: $can');
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      final result = await WiFiScan.instance.startScan();
      if (!result) {
        throw Exception('Failed to start WiFi scan');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      final networks = await WiFiScan.instance.getScannedResults();
      
      _loggingService.info('‚úÖ Found ${networks.length} WiFi networks');
      return networks;
    } catch (e, stackTrace) {
      _loggingService.error('‚ùå Failed to scan WiFi networks', e, stackTrace);
      return [];
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
  Future<bool> pingDevice(String deviceId) async {
    try {
      final deviceRef = _deviceRefs[deviceId];
      if (deviceRef == null) return false;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–æ–º–∞–Ω–¥—É
      await deviceRef.child('ping').set({
        'timestamp': DateTime.now().toIso8601String(),
        'from': 'mobile_app',
      });
      
      // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
      final completer = Completer<bool>();
      Timer(const Duration(seconds: 5), () {
        if (!completer.isCompleted) completer.complete(false);
      });
      
      deviceRef.child('pong').onValue.take(1).listen((event) {
        if (!completer.isCompleted) completer.complete(true);
      });
      
      return await completer.future;
    } catch (e) {
      return false;
    }
  }

  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _loggingService.info('üßπ Disposing IoT Device Service...');
    
    for (final controller in _deviceControllers.values) {
      controller.close();
    }
    _deviceControllers.clear();
    _deviceRefs.clear();
  }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
class IoTDeviceInfo {
  final String id;
  final String name;
  final SmartDeviceType type;
  final String ipAddress;
  final String macAddress;
  final String firmwareVersion;
  final bool isOnline;
  final Map<String, dynamic>? capabilities;

  IoTDeviceInfo({
    required this.id,
    required this.name,
    required this.type,
    required this.ipAddress,
    required this.macAddress,
    required this.firmwareVersion,
    required this.isOnline,
    this.capabilities,
  });

  factory IoTDeviceInfo.fromMap(String id, Map<String, dynamic> data) {
    return IoTDeviceInfo(
      id: id,
      name: data['name'] ?? 'Unknown Device',
      type: SmartDeviceType.values.firstWhere(
        (t) => t.id == data['type'],
        orElse: () => SmartDeviceType.light,
      ),
      ipAddress: data['ipAddress'] ?? '',
      macAddress: data['macAddress'] ?? '',
      firmwareVersion: data['firmwareVersion'] ?? '1.0.0',
      isOnline: data['isOnline'] ?? false,
      capabilities: data['capabilities'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'type': type.id,
      'ipAddress': ipAddress,
      'macAddress': macAddress,
      'firmwareVersion': firmwareVersion,
      'isOnline': isOnline,
      if (capabilities != null) 'capabilities': capabilities,
    };
  }
} 