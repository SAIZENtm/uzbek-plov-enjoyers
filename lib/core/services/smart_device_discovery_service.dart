import 'dart:async';
import 'dart:io';
import 'package:network_info_plus/network_info_plus.dart';
import '../models/smart_home_device_model.dart';
import 'logging_service_secure.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ WiFi —Å–µ—Ç–∏
class SmartDeviceDiscoveryService {
  final LoggingService _loggingService;
  
  SmartDeviceDiscoveryService({
    required LoggingService loggingService,
  }) : _loggingService = loggingService;

  /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏
  Future<List<DiscoveredDevice>> scanForSmartDevices() async {
    try {
      _loggingService.info('üîç Starting smart device discovery...');
      
      final devices = <DiscoveredDevice>[];
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ WiFi —Å–µ—Ç–∏
      final networkInfo = NetworkInfo();
      final wifiName = await networkInfo.getWifiName();
      final wifiIP = await networkInfo.getWifiIP();
      
      _loggingService.info('üì∂ Scanning network: $wifiName (IP: $wifiIP)');
      
      // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —É–º–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      devices.addAll(await _scanForXiaomiDevices());
      devices.addAll(await _scanForTuyaDevices());
      devices.addAll(await _scanForPhilipsHueDevices());
      devices.addAll(await _scanForTPlinkDevices());
      devices.addAll(await _scanForSamsungDevices());
      devices.addAll(await _scanForLGDevices());
      devices.addAll(await _scanForGenericDevices());
      
      _loggingService.info('‚úÖ Found ${devices.length} smart devices');
      return devices;
    } catch (e, stackTrace) {
      _loggingService.error('‚ùå Failed to scan for devices', e, stackTrace);
      return [];
    }
  }

  /// –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ Xiaomi (Mi Home)
  Future<List<DiscoveredDevice>> _scanForXiaomiDevices() async {
    final devices = <DiscoveredDevice>[];
    
    try {
      // Xiaomi —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–æ—Ä—Ç—ã 54321, 4321
      final commonPorts = [54321, 4321];
      final subnet = await _getSubnet();
      
      for (int i = 1; i < 255; i++) {
        final ip = '$subnet.$i';
        
        for (final port in commonPorts) {
          try {
            final socket = await Socket.connect(ip, port, timeout: const Duration(milliseconds: 100));
            
            // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –ø–æ—Ä—Ç—É –∏ –æ—Ç–≤–µ—Ç—É
            final device = DiscoveredDevice(
              id: 'xiaomi_${ip.replaceAll('.', '_')}',
              name: 'Xiaomi Smart Device',
              brand: 'Xiaomi',
              type: _guessDeviceType(port),
              ipAddress: ip,
              port: port,
              isOnline: true,
              protocol: 'miio',
            );
            
            devices.add(device);
            socket.destroy();
            break;
          } catch (e) {
            // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º IP:–ø–æ—Ä—Ç
          }
        }
      }
    } catch (e) {
      _loggingService.warning('‚ö†Ô∏è Xiaomi scan failed: $e');
    }
    
    return devices;
  }

  /// –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ Tuya/Smart Life
  Future<List<DiscoveredDevice>> _scanForTuyaDevices() async {
    final devices = <DiscoveredDevice>[];
    
    try {
      // Tuya —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–æ—Ä—Ç 6668
      final subnet = await _getSubnet();
      
      for (int i = 1; i < 255; i++) {
        final ip = '$subnet.$i';
        
        try {
          final socket = await Socket.connect(ip, 6668, timeout: const Duration(milliseconds: 100));
          
          final device = DiscoveredDevice(
            id: 'tuya_${ip.replaceAll('.', '_')}',
            name: 'Smart Life Device',
            brand: 'Tuya',
            type: SmartDeviceType.light, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            ipAddress: ip,
            port: 6668,
            isOnline: true,
            protocol: 'tuya',
          );
          
          devices.add(device);
          socket.destroy();
        } catch (e) {
          // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        }
      }
    } catch (e) {
      _loggingService.warning('‚ö†Ô∏è Tuya scan failed: $e');
    }
    
    return devices;
  }

  /// –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Philips Hue
  Future<List<DiscoveredDevice>> _scanForPhilipsHueDevices() async {
    final devices = <DiscoveredDevice>[];
    
    try {
      // Hue Bridge –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 80
      final subnet = await _getSubnet();
      
      for (int i = 1; i < 255; i++) {
        final ip = '$subnet.$i';
        
        try {
          final client = HttpClient();
          final request = await client.get(ip, 80, '/api/config');
          request.headers.add('User-Agent', 'Newport Smart Home');
          
          final response = await request.close().timeout(const Duration(milliseconds: 500));
          
          if (response.statusCode == 200) {
            final device = DiscoveredDevice(
              id: 'hue_bridge_${ip.replaceAll('.', '_')}',
              name: 'Philips Hue Bridge',
              brand: 'Philips',
              type: SmartDeviceType.light,
              ipAddress: ip,
              port: 80,
              isOnline: true,
              protocol: 'hue',
            );
            
            devices.add(device);
          }
          
          client.close();
        } catch (e) {
          // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        }
      }
    } catch (e) {
      _loggingService.warning('‚ö†Ô∏è Hue scan failed: $e');
    }
    
    return devices;
  }

  /// –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ TP-Link Kasa —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  Future<List<DiscoveredDevice>> _scanForTPlinkDevices() async {
    final devices = <DiscoveredDevice>[];
    
    try {
      // TP-Link Kasa –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 9999
      final subnet = await _getSubnet();
      
      for (int i = 1; i < 255; i++) {
        final ip = '$subnet.$i';
        
        try {
          final socket = await Socket.connect(ip, 9999, timeout: const Duration(milliseconds: 100));
          
          final device = DiscoveredDevice(
            id: 'tplink_${ip.replaceAll('.', '_')}',
            name: 'TP-Link Kasa Device',
            brand: 'TP-Link',
            type: SmartDeviceType.light,
            ipAddress: ip,
            port: 9999,
            isOnline: true,
            protocol: 'kasa',
          );
          
          devices.add(device);
          socket.destroy();
        } catch (e) {
          // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        }
      }
    } catch (e) {
      _loggingService.warning('‚ö†Ô∏è TP-Link scan failed: $e');
    }
    
    return devices;
  }

  /// –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Samsung SmartThings
  Future<List<DiscoveredDevice>> _scanForSamsungDevices() async {
    final devices = <DiscoveredDevice>[];
    
    try {
      // Samsung —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç UPnP (–ø–æ—Ä—Ç 1900)
      final subnet = await _getSubnet();
      
      // –ü–æ–∏—Å–∫ Samsung –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤ –∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–≤
      for (int i = 1; i < 255; i++) {
        final ip = '$subnet.$i';
        
        try {
          final client = HttpClient();
          final request = await client.get(ip, 8080, '/');
          
          final response = await request.close().timeout(const Duration(milliseconds: 300));
          
          if (response.statusCode == 200) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Samsung
            final server = response.headers.value('server') ?? '';
            if (server.toLowerCase().contains('samsung')) {
              final device = DiscoveredDevice(
                id: 'samsung_${ip.replaceAll('.', '_')}',
                name: 'Samsung Smart Device',
                brand: 'Samsung',
                type: SmartDeviceType.ac, // –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä
                ipAddress: ip,
                port: 8080,
                isOnline: true,
                protocol: 'samsung',
              );
              
              devices.add(device);
            }
          }
          
          client.close();
        } catch (e) {
          // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        }
      }
    } catch (e) {
      _loggingService.warning('‚ö†Ô∏è Samsung scan failed: $e');
    }
    
    return devices;
  }

  /// –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ LG ThinQ
  Future<List<DiscoveredDevice>> _scanForLGDevices() async {
    final devices = <DiscoveredDevice>[];
    
    try {
      final subnet = await _getSubnet();
      
      for (int i = 1; i < 255; i++) {
        final ip = '$subnet.$i';
        
        try {
          final client = HttpClient();
          final request = await client.get(ip, 8080, '/');
          
          final response = await request.close().timeout(const Duration(milliseconds: 300));
          
          if (response.statusCode == 200) {
            final server = response.headers.value('server') ?? '';
            if (server.toLowerCase().contains('lg')) {
              final device = DiscoveredDevice(
                id: 'lg_${ip.replaceAll('.', '_')}',
                name: 'LG ThinQ Device',
                brand: 'LG',
                type: SmartDeviceType.ac,
                ipAddress: ip,
                port: 8080,
                isOnline: true,
                protocol: 'lg',
              );
              
              devices.add(device);
            }
          }
          
          client.close();
        } catch (e) {
          // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        }
      }
    } catch (e) {
      _loggingService.warning('‚ö†Ô∏è LG scan failed: $e');
    }
    
    return devices;
  }

  /// –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  Future<List<DiscoveredDevice>> _scanForGenericDevices() async {
    final devices = <DiscoveredDevice>[];
    
    try {
      // –°–∫–∞–Ω–∏—Ä—É–µ–º –æ–±—â–∏–µ –ø–æ—Ä—Ç—ã —É–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      final commonPorts = [80, 8080, 8081, 8888, 10000];
      final subnet = await _getSubnet();
      
      for (int i = 1; i < 255; i++) {
        final ip = '$subnet.$i';
        
        for (final port in commonPorts) {
          try {
            final client = HttpClient();
            final request = await client.get(ip, port, '/');
            
            final response = await request.close().timeout(const Duration(milliseconds: 200));
            
            if (response.statusCode == 200) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
              final server = response.headers.value('server') ?? '';
              final contentType = response.headers.value('content-type') ?? '';
              
              if (_isSmartDevice(server, contentType)) {
                final device = DiscoveredDevice(
                  id: 'generic_${ip.replaceAll('.', '_')}_$port',
                  name: 'Smart Device',
                  brand: 'Unknown',
                  type: SmartDeviceType.light,
                  ipAddress: ip,
                  port: port,
                  isOnline: true,
                  protocol: 'http',
                );
                
                devices.add(device);
                break; // –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ —ç—Ç–æ–º IP
              }
            }
            
            client.close();
          } catch (e) {
            // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —ç—Ç–æ–º –ø–æ—Ä—Ç—É
          }
        }
      }
    } catch (e) {
      _loggingService.warning('‚ö†Ô∏è Generic scan failed: $e');
    }
    
    return devices;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–µ—Ç–∏
  Future<String> _getSubnet() async {
    final networkInfo = NetworkInfo();
    final wifiIP = await networkInfo.getWifiIP() ?? '192.168.1.100';
    final parts = wifiIP.split('.');
    return '${parts[0]}.${parts[1]}.${parts[2]}';
  }

  /// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –ø–æ—Ä—Ç—É
  SmartDeviceType _guessDeviceType(int port) {
    switch (port) {
      case 54321:
      case 4321:
        return SmartDeviceType.ac; // Xiaomi –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã
      case 6668:
        return SmartDeviceType.light; // Tuya –ª–∞–º–ø—ã/—Ä–æ–∑–µ—Ç–∫–∏
      case 80:
      case 8080:
        return SmartDeviceType.light; // HTTP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      default:
        return SmartDeviceType.light;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–º–Ω—ã–º
  bool _isSmartDevice(String server, String contentType) {
    final smartKeywords = [
      'smart', 'iot', 'esp', 'arduino', 'tasmota', 'esphome',
      'shelly', 'sonoff', 'wemo', 'lifx', 'nanoleaf'
    ];
    
    final combined = '$server $contentType'.toLowerCase();
    return smartKeywords.any((keyword) => combined.contains(keyword));
  }
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
class DiscoveredDevice {
  final String id;
  final String name;
  final String brand;
  final SmartDeviceType type;
  final String ipAddress;
  final int port;
  final bool isOnline;
  final String protocol;
  final Map<String, dynamic>? additionalInfo;

  DiscoveredDevice({
    required this.id,
    required this.name,
    required this.brand,
    required this.type,
    required this.ipAddress,
    required this.port,
    required this.isOnline,
    required this.protocol,
    this.additionalInfo,
  });

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ SmartHomeDevice
  SmartHomeDevice toSmartHomeDevice() {
    return SmartHomeDevice(
      id: id,
      name: name,
      type: type,
      status: false,
      temperature: type == SmartDeviceType.ac ? 23.0 : null,
      additionalData: {
        'brand': brand,
        'ipAddress': ipAddress,
        'port': port,
        'protocol': protocol,
        'isReal': true,
        if (additionalInfo != null) ...additionalInfo!,
      },
      lastUpdated: DateTime.now(),
      updatedBy: 'Auto-Discovery',
    );
  }
} 