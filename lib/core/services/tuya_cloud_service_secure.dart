import 'dart:async';
import 'dart:convert';
import 'package:cloud_functions/cloud_functions.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import '../models/smart_home_device_model.dart';
import 'auth_service.dart';
import 'logging_service_secure.dart';
import 'fcm_service.dart';

/// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Tuya Cloud —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–∫—Å–∏
/// –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫–∏—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–ª–∏ –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∫ Tuya API
class TuyaCloudService {
  final AuthService authService;
  final LoggingService loggingService;
  final FCMService? fcmService;
  
  final FirebaseFunctions _functions = FirebaseFunctions.instance;
  final FlutterSecureStorage _secureStorage = const FlutterSecureStorage();
  
  // –ö—ç—à —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  List<SmartHomeDevice> _cachedDevices = [];
  // DateTime? _lastDeviceSync; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–∫–∞
  Timer? _deviceSyncTimer;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
  bool _isInitialized = false;
  StreamController<List<SmartHomeDevice>>? _devicesStreamController;
  
  TuyaCloudService({
    required this.authService,
    required this.loggingService,
    this.fcmService,
  });
  
  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  bool get isConfigured => _isInitialized;
  
  /// –ü–æ—Ç–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  Stream<List<SmartHomeDevice>> get devicesStream {
    _devicesStreamController ??= StreamController<List<SmartHomeDevice>>.broadcast();
    return _devicesStreamController!.stream;
  }
  
  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    try {
      loggingService.info('üè† Initializing secure Tuya Cloud Service...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
      if (!authService.isAuthenticated || authService.verifiedApartment == null) {
        loggingService.warning('‚ùå User not authenticated or no apartment selected');
        return;
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      await _loadCachedDevices();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      await syncDevices();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      _startDeviceSyncTimer();
      
      _isInitialized = true;
      loggingService.info('‚úÖ Tuya Cloud Service initialized successfully');
    } catch (e) {
      loggingService.error('‚ùå Failed to initialize Tuya Cloud Service', e);
      _isInitialized = false;
    }
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–º–Ω–æ–≥–æ –¥–æ–º–∞
  Future<List<SmartHomeDevice>> fetchUserDevices() async {
    try {
      loggingService.info('üì± Fetching smart home devices...');
      
      final apartment = authService.verifiedApartment;
      if (apartment == null) {
        throw Exception('No apartment selected');
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—É—é Cloud Function
      final callable = _functions.httpsCallable('getSmartHomeDevices');
      final result = await callable.call({
        'apartmentId': apartment.id,
      });
      
      if (result.data['success'] == true) {
        final List<dynamic> devicesData = result.data['devices'] ?? [];
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–æ–¥–µ–ª–∏
        final devices = devicesData
            .map((data) => _parseDeviceFromServer(data))
            .where((device) => device != null)
            .cast<SmartHomeDevice>()
            .toList();
        
        loggingService.info('‚úÖ Fetched ${devices.length} devices');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        _cachedDevices = devices;
        // last sync time can be stored in preferences if needed
        await _saveCachedDevices();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        _devicesStreamController?.add(devices);
        
        return devices;
      } else {
        throw Exception('Failed to fetch devices');
      }
    } on FirebaseFunctionsException catch (e) {
      _handleFunctionError(e);
      return _cachedDevices; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –æ—à–∏–±–∫–µ
    } catch (e) {
      loggingService.error('‚ùå Error fetching devices', e);
      return _cachedDevices;
    }
  }

  /// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–∂–Ω–∏–º API: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ SmartHomeDevice
  /// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (Map/SmartHomeDevice) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç SmartHomeDevice
  List<SmartHomeDevice> convertToSmartHomeDevices(List<dynamic> devicesData) {
    final result = <SmartHomeDevice>[];
    for (final item in devicesData) {
      if (item is SmartHomeDevice) {
        result.add(item);
      } else if (item is Map<String, dynamic>) {
        final parsed = _parseDeviceFromServer(item);
        if (parsed != null) result.add(parsed);
      }
    }
    return result;
  }
  
  /// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
  Future<bool> controlDevice(String deviceId, String command, dynamic value) async {
    try {
      loggingService.info('üéõÔ∏è Controlling device $deviceId: $command = $value');
      
      final apartment = authService.verifiedApartment;
      if (apartment == null) {
        throw Exception('No apartment selected');
      }
      
      // –í—ã–∑—ã–≤–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—É—é Cloud Function
      final callable = _functions.httpsCallable('controlSmartHomeDevice');
      final result = await callable.call({
        'apartmentId': apartment.id,
        'deviceId': deviceId,
        'command': command,
        'value': value,
      });
      
      if (result.data['success'] == true) {
        loggingService.info('‚úÖ Device control successful');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        _updateLocalDeviceState(deviceId, command, value);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        Timer(const Duration(seconds: 2), () => syncDevices());
        
        return true;
      } else {
        throw Exception('Control command failed');
      }
    } on FirebaseFunctionsException catch (e) {
      _handleFunctionError(e);
      return false;
    } catch (e) {
      loggingService.error('‚ùå Error controlling device', e);
      return false;
    }
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  Future<Map<String, dynamic>?> getDeviceStatus(String deviceId) async {
    try {
      final apartment = authService.verifiedApartment;
      if (apartment == null) return null;
      
      final callable = _functions.httpsCallable('getDeviceStatus');
      final result = await callable.call({
        'apartmentId': apartment.id,
        'deviceId': deviceId,
      });
      
      if (result.data['success'] == true) {
        return result.data['status'] as Map<String, dynamic>;
      }
      
      return null;
    } on FirebaseFunctionsException catch (e) {
      _handleFunctionError(e);
      return null;
    } catch (e) {
      loggingService.error('Error getting device status', e);
      return null;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω (—á–µ—Ä–µ–∑ Cloud Function)
  Future<List<TuyaScene>> fetchUserScenes() async {
    try {
      final apartment = authService.verifiedApartment;
      if (apartment == null) return [];
      final callable = _functions.httpsCallable('getSmartHomeScenes');
      final result = await callable.call({'apartmentId': apartment.id});
      final List<dynamic> scenes = result.data['scenes'] ?? [];
      return scenes
          .map((s) => TuyaScene.fromJson(Map<String, dynamic>.from(s)))
          .toList();
    } on FirebaseFunctionsException catch (e) {
      _handleFunctionError(e);
      return [];
    } catch (e) {
      loggingService.error('Error fetching scenes', e);
      return [];
    }
  }

  /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã (—á–µ—Ä–µ–∑ Cloud Function)
  Future<bool> executeScene(String sceneId) async {
    try {
      final apartment = authService.verifiedApartment;
      if (apartment == null) return false;
      final callable = _functions.httpsCallable('executeSmartHomeScene');
      final result = await callable.call({'apartmentId': apartment.id, 'sceneId': sceneId});
      return result.data['success'] == true;
    } on FirebaseFunctionsException catch (e) {
      _handleFunctionError(e);
      return false;
    } catch (e) {
      loggingService.error('Error executing scene', e);
      return false;
    }
  }
  
  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  Future<void> syncDevices() async {
    try {
      await fetchUserDevices();
    } catch (e) {
      loggingService.error('Error syncing devices', e);
    }
  }
  
  /// –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  Future<bool> toggleDevice(String deviceId, bool turnOn) async {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    final device = _cachedDevices.firstWhere(
      (d) => d.id == deviceId,
      orElse: () => throw Exception('Device not found'),
    );
    
    String command;
    switch (device.type) {
      case SmartDeviceType.light:
        command = 'switch_led';
        break;
      case SmartDeviceType.ac:
      case SmartDeviceType.heater:
        command = 'switch';
        break;
      case SmartDeviceType.door:
        command = 'lock';
        break;
      default:
        command = 'switch_1';
    }
    
    return controlDevice(deviceId, command, turnOn);
  }
  
  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
  Future<bool> setTemperature(String deviceId, double temperature) async {
    return controlDevice(deviceId, 'temp_set', temperature.round());
  }
  
  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è—Ä–∫–æ—Å—Ç–∏ —Å–≤–µ—Ç–∞
  Future<bool> setBrightness(String deviceId, int brightness) async {
    // Tuya –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω 10-1000 –¥–ª—è —è—Ä–∫–æ—Å—Ç–∏
    final tuyaBrightness = (brightness * 10).clamp(10, 1000);
    return controlDevice(deviceId, 'bright_value_v2', tuyaBrightness);
  }
  
  /// –ü–∞—Ä—Å–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
  SmartHomeDevice? _parseDeviceFromServer(Map<String, dynamic> data) {
    try {
      final String id = data['id'];
      final String name = data['name'] ?? '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
      final String category = data['category'] ?? 'unknown';
      final bool online = data['online'] ?? false;
      final Map<String, dynamic> status = Map<String, dynamic>.from(data['status'] ?? {});
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      final type = _categoryToDeviceType(category);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      bool isOn = false;
      if (status.containsKey('switch_led')) {
        isOn = status['switch_led'] == true;
      } else if (status.containsKey('switch')) {
        isOn = status['switch'] == true;
      } else if (status.containsKey('switch_1')) {
        isOn = status['switch_1'] == true;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
      double? temperature;
      if (status.containsKey('temp_current')) {
        temperature = (status['temp_current'] as num?)?.toDouble();
      } else if (status.containsKey('temp_set')) {
        temperature = (status['temp_set'] as num?)?.toDouble();
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —è—Ä–∫–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
      int? brightness;
      if (status.containsKey('bright_value_v2')) {
        brightness = ((status['bright_value_v2'] as num?) ?? 0) ~/ 10;
      }
      
              return SmartHomeDevice(
          id: id,
          name: name,
          type: type,
          status: isOn,
          temperature: temperature,
          additionalData: {
            'online': online,
            'brightness': brightness,
            'icon': _getDeviceIcon(type),
            'rawData': data,
          },
        );
    } catch (e) {
      loggingService.error('Error parsing device: ${data['id']}', e);
      return null;
    }
  }
  
  /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Tuya –≤ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  SmartDeviceType _categoryToDeviceType(String category) {
    switch (category.toLowerCase()) {
      case 'dj': // Light
      case 'light':
      case 'lamp':
        return SmartDeviceType.light;
      case 'kt': // Air conditioner
      case 'ac':
      case 'aircon':
        return SmartDeviceType.ac;
      case 'qn': // Heater
      case 'heater':
      case 'heating':
        return SmartDeviceType.heater;
      case 'ms': // Door sensor
      case 'door':
      case 'lock':
      case 'cl': // Curtain (–∏—Å–ø–æ–ª—å–∑—É–µ–º door –¥–ª—è —à—Ç–æ—Ä)
        return SmartDeviceType.door;
      case 'camera':
      case 'security_camera':
      case 'sp': // Smart camera
        return SmartDeviceType.camera;
      default:
        return SmartDeviceType.light; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }
  
  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  String _getDeviceIcon(SmartDeviceType type) {
    switch (type) {
      case SmartDeviceType.light:
        return 'üí°';
      case SmartDeviceType.ac:
        return '‚ùÑÔ∏è';
      case SmartDeviceType.heater:
        return 'üî•';
      case SmartDeviceType.door:
        return 'üö™';
      case SmartDeviceType.camera:
        return 'üì∑';
    }
  }

    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  void _updateLocalDeviceState(String deviceId, String command, dynamic value) {
    final deviceIndex = _cachedDevices.indexWhere((d) => d.id == deviceId);
    if (deviceIndex == -1) return;
    
    final device = _cachedDevices[deviceIndex];
    SmartHomeDevice updatedDevice;
    
    switch (command) {
      case 'switch':
      case 'switch_led':
      case 'switch_1':
        updatedDevice = device.copyWith(status: value as bool);
        break;
      case 'temp_set':
        updatedDevice = device.copyWith(temperature: (value as num).toDouble());
        break;
      case 'bright_value_v2':
        final newAdditionalData = Map<String, dynamic>.from(device.additionalData ?? {});
        newAdditionalData['brightness'] = ((value as num) / 10).round();
        updatedDevice = device.copyWith(additionalData: newAdditionalData);
        break;
      default:
        return;
    }
    
    _cachedDevices[deviceIndex] = updatedDevice;
    _devicesStreamController?.add(_cachedDevices);
  }
  
  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Cloud Functions
  void _handleFunctionError(FirebaseFunctionsException e) {
    switch (e.code) {
      case 'unauthenticated':
        loggingService.error('Not authenticated for smart home access');
        break;
      case 'permission-denied':
        loggingService.error('No permission to access smart home');
        break;
      case 'invalid-argument':
        loggingService.error('Invalid request data: ${e.message}');
        break;
      default:
        loggingService.error('Smart home error: ${e.code} - ${e.message}');
    }
  }
  
  /// –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  Future<void> _loadCachedDevices() async {
    try {
      final cachedJson = await _secureStorage.read(key: 'smart_home_devices_cache');
      if (cachedJson != null) {
        final List<dynamic> devicesList = jsonDecode(cachedJson);
        _cachedDevices = devicesList
            .map((data) => SmartHomeDevice.fromJson(Map<String, dynamic>.from(data)))
            .toList();
        
        _devicesStreamController?.add(_cachedDevices);
        loggingService.info('Loaded ${_cachedDevices.length} cached devices');
      }
    } catch (e) {
      loggingService.error('Failed to load cached devices', e);
    }
  }
  
  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –∫—ç—à
  Future<void> _saveCachedDevices() async {
    try {
      final devicesJson = _cachedDevices.map((d) => d.toJson()).toList();
      await _secureStorage.write(
        key: 'smart_home_devices_cache',
        value: jsonEncode(devicesJson),
      );
    } catch (e) {
      loggingService.error('Failed to save devices cache', e);
    }
  }
  
  /// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  void _startDeviceSyncTimer() {
    _deviceSyncTimer?.cancel();
    _deviceSyncTimer = Timer.periodic(const Duration(minutes: 5), (_) {
      if (_isInitialized) {
        syncDevices();
      }
    });
  }
  
  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _deviceSyncTimer?.cancel();
    _devicesStreamController?.close();
    _isInitialized = false;
  }
}

/// –ú–æ–¥–µ–ª—å —Å—Ü–µ–Ω—ã Tuya (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –¥–ª—è UI)
class TuyaScene {
  final String id;
  final String name;
  final String icon;
  final bool enabled;

  TuyaScene({
    required this.id,
    required this.name,
    required this.icon,
    required this.enabled,
  });

  factory TuyaScene.fromJson(Map<String, dynamic> json) {
    return TuyaScene(
      id: json['scene_id']?.toString() ?? json['id']?.toString() ?? '',
      name: json['name']?.toString() ?? 'Scene',
      icon: json['icon']?.toString() ?? '',
      enabled: (json['enabled'] as bool?) ?? true,
    );
  }
}
