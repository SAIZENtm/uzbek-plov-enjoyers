// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å Firebase

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
const firebaseConfig = {
  apiKey: "your-api-key",
  authDomain: "newport-23a19.firebaseapp.com",
  projectId: "newport-23a19",
  storageBucket: "newport-23a19.appspot.com",
  messagingSenderId: "your-sender-id",
  appId: "your-app-id"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
// firebase.initializeApp(firebaseConfig);
// const db = firebase.firestore();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
function generateUniqueId() {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function sendNotification(notificationData) {
  try {
    const notification = {
      id: generateUniqueId(),
      userId: notificationData.userId,
      title: notificationData.title,
      message: notificationData.message,
      type: notificationData.type || 'system',
      createdAt: new Date().toISOString(),
      readAt: null,
      isRead: false,
      data: notificationData.data || {},
      relatedRequestId: notificationData.relatedRequestId || null,
      adminName: notificationData.adminName || null,
      imageUrl: notificationData.imageUrl || null
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
    await db.collection('notifications').doc(notification.id).set(notification);
    
    console.log('‚úÖ Notification sent successfully:', notification.id);
    console.log('üì± Notification data:', notification);
    return notification;
  } catch (error) {
    console.error('‚ùå Error sending notification:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function sendAdminResponse(userId, requestId, message, adminName) {
  return await sendNotification({
    userId: userId,
    title: '–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
    message: message,
    type: 'admin_response',
    relatedRequestId: requestId,
    adminName: adminName
  });
}

async function sendSystemNotification(userId, title, message) {
  return await sendNotification({
    userId: userId,
    title: title,
    message: message,
    type: 'system'
  });
}

async function sendServiceUpdate(userId, requestId, message) {
  return await sendNotification({
    userId: userId,
    title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ',
    message: message,
    type: 'service_update',
    relatedRequestId: requestId
  });
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function testNotifications() {
  const testUserId = 'AC3077863'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
  console.log('üß™ Starting notification tests...');
  
  try {
    // –¢–µ—Å—Ç 1: –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    console.log('\nüì¢ Test 1: System notification');
    await sendSystemNotification(
      testUserId,
      '–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
    );
    
    // –¢–µ—Å—Ç 2: –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    console.log('\nüë®‚Äçüíº Test 2: Admin response');
    await sendAdminResponse(
      testUserId,
      'test_request_123',
      '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞. –í—Å–µ —Ä–∞–±–æ—Ç—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π.',
      '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤'
    );
    
    // –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —É—Å–ª—É–≥–µ
    console.log('\nüîß Test 3: Service update');
    await sendServiceUpdate(
      testUserId,
      'test_request_456',
      '–ú–∞—Å—Ç–µ—Ä –≤—ã–µ—Ö–∞–ª –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ'
    );
    
    console.log('\n‚úÖ All tests completed successfully!');
    console.log('üì± Check the mobile app notifications screen');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
async function sendBulkNotification(title, message, type = 'system') {
  try {
    console.log('üì§ Sending bulk notification to all users...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersSnapshot = await db.collection('users').get();
    
    if (usersSnapshot.empty) {
      console.log('‚ö†Ô∏è No users found in database');
      return;
    }
    
    const promises = usersSnapshot.docs.map(userDoc => {
      const userData = userDoc.data();
      const userId = userData.passport_number || userData.passportNumber;
      
      if (userId) {
        return sendNotification({
          userId: userId,
          title: title,
          message: message,
          type: type
        });
      }
    });
    
    await Promise.all(promises.filter(p => p));
    console.log(`‚úÖ Bulk notification sent to ${promises.length} users`);
    
  } catch (error) {
    console.error('‚ùå Error sending bulk notification:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function getUsersList() {
  try {
    const usersSnapshot = await db.collection('users').get();
    const users = [];
    
    usersSnapshot.forEach(doc => {
      const userData = doc.data();
      const userId = userData.passport_number || userData.passportNumber;
      if (userId) {
        users.push({
          id: userId,
          name: userData.full_name || userData.fullName || 'Unknown',
          email: userData.email || 'No email'
        });
      }
    });
    
    console.log('üë• Users list:', users);
    return users;
  } catch (error) {
    console.error('‚ùå Error getting users list:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function checkNotifications(userId) {
  try {
    const notificationsSnapshot = await db.collection('notifications')
      .where('userId', '==', userId)
      .orderBy('createdAt', 'desc')
      .limit(10)
      .get();
    
    if (notificationsSnapshot.empty) {
      console.log('üì≠ No notifications found for user:', userId);
      return [];
    }
    
    const notifications = [];
    notificationsSnapshot.forEach(doc => {
      notifications.push({
        id: doc.id,
        ...doc.data()
      });
    });
    
    console.log(`üì¨ Found ${notifications.length} notifications for user ${userId}:`);
    notifications.forEach(n => {
      console.log(`  ‚Ä¢ ${n.title} (${n.type}) - ${n.isRead ? 'Read' : 'Unread'}`);
    });
    
    return notifications;
  } catch (error) {
    console.error('‚ùå Error checking notifications:', error);
    throw error;
  }
}

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
console.log(`
üöÄ Notification Test Script Loaded!

Available functions:
1. testNotifications() - Run all test notifications
2. sendSystemNotification(userId, title, message) - Send system notification
3. sendAdminResponse(userId, requestId, message, adminName) - Send admin response
4. sendServiceUpdate(userId, requestId, message) - Send service update
5. sendBulkNotification(title, message, type) - Send to all users
6. getUsersList() - Get list of all users
7. checkNotifications(userId) - Check notifications for specific user

Example usage:
- testNotifications()
- sendSystemNotification('AC3077863', 'Test', 'Hello from admin panel!')
- getUsersList()
- checkNotifications('AC3077863')

‚ö†Ô∏è Make sure to replace 'AC3077863' with actual user IDs from your database.
`); 