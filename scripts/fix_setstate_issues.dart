import 'dart:io';

/// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å setState –ø–æ—Å–ª–µ await
/// –ó–∞–ø—É—Å–∫: dart scripts/fix_setstate_issues.dart [--fix]
void main(List<String> args) async {
  final shouldFix = args.contains('--fix');
  final verbose = args.contains('--verbose');
  
  print('üîç Scanning for setState issues...');
  print('Mode: ${shouldFix ? "FIX" : "CHECK"}');
  
  final issues = <String, List<Issue>>{};
  int totalFiles = 0;
  int filesWithIssues = 0;
  int totalIssues = 0;
  
  // –°–∫–∞–Ω–∏—Ä—É–µ–º lib –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  final libDir = Directory('lib');
  if (!libDir.existsSync()) {
    print('‚ùå lib directory not found');
    exit(1);
  }
  
  await for (final file in libDir.list(recursive: true)) {
    if (file is File && file.path.endsWith('.dart')) {
      totalFiles++;
      
      final content = await file.readAsString();
      final fileName = file.path.replaceAll('\\', '/');
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      if (fileName.contains('.g.dart') || 
          fileName.contains('.freezed.dart')) {
        continue;
      }
      
      final fileIssues = await _analyzeFile(content, fileName);
      
      if (fileIssues.isNotEmpty) {
        filesWithIssues++;
        totalIssues += fileIssues.length;
        issues[fileName] = fileIssues;
        
        if (shouldFix) {
          final fixedContent = _fixIssues(content, fileIssues);
          await file.writeAsString(fixedContent);
          print('‚úÖ Fixed: $fileName');
        }
      }
    }
  }
  
  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  print('\nüìä Summary:');
  print('Total files scanned: $totalFiles');
  print('Files with issues: $filesWithIssues');
  print('Total issues found: $totalIssues');
  
  if (issues.isNotEmpty) {
    print('\n‚ö†Ô∏è  Issues found:\n');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
    final setStateIssues = <String, List<Issue>>{};
    final subscriptionIssues = <String, List<Issue>>{};
    final timerIssues = <String, List<Issue>>{};
    final controllerIssues = <String, List<Issue>>{};
    
    issues.forEach((file, fileIssues) {
      for (final issue in fileIssues) {
        switch (issue.type) {
          case IssueType.setStateAfterAwait:
            setStateIssues.putIfAbsent(file, () => []).add(issue);
            break;
          case IssueType.unsubscribedStream:
            subscriptionIssues.putIfAbsent(file, () => []).add(issue);
            break;
          case IssueType.uncanceledTimer:
            timerIssues.putIfAbsent(file, () => []).add(issue);
            break;
          case IssueType.undisposedController:
            controllerIssues.putIfAbsent(file, () => []).add(issue);
            break;
        }
      }
    });
    
    // setState –ø—Ä–æ–±–ª–µ–º—ã
    if (setStateIssues.isNotEmpty) {
      print('üö® setState after await without mounted check:');
      _printIssues(setStateIssues, verbose);
    }
    
    // –ü–æ–¥–ø–∏—Å–∫–∏
    if (subscriptionIssues.isNotEmpty) {
      print('\nüì° Unsubscribed streams:');
      _printIssues(subscriptionIssues, verbose);
    }
    
    // –¢–∞–π–º–µ—Ä—ã
    if (timerIssues.isNotEmpty) {
      print('\n‚è±Ô∏è  Uncanceled timers:');
      _printIssues(timerIssues, verbose);
    }
    
    // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
    if (controllerIssues.isNotEmpty) {
      print('\nüéÆ Undisposed controllers:');
      _printIssues(controllerIssues, verbose);
    }
    
    if (!shouldFix) {
      print('\nüí° Run with --fix to automatically fix these issues');
      print('   Or use SafeStateMixin for automatic lifecycle management');
    }
  } else {
    print('\n‚úÖ No lifecycle issues found!');
  }
}

/// –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
Future<List<Issue>> _analyzeFile(String content, String fileName) async {
  final issues = <Issue>[];
  final lines = content.split('\n');
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º
  
  // 1. setState –ø–æ—Å–ª–µ await –±–µ–∑ mounted –ø—Ä–æ–≤–µ—Ä–∫–∏
  final setStatePattern = RegExp(
    r'await\s+.*?;\s*(?:(?!if\s*\(\s*!?mounted).)*(setState\s*\()',
    multiLine: true,
    dotAll: true,
  );
  
  // 2. StreamSubscription –±–µ–∑ cancel
  final streamPattern = RegExp(r'(\w+)\.listen\s*\(');
  final cancelPattern = RegExp(r'(\w+)\.cancel\s*\(\s*\)');
  
  // 3. Timer –±–µ–∑ cancel
  final timerPattern = RegExp(r'Timer(?:\.periodic)?\s*\(');
  
  // 4. Controller –±–µ–∑ dispose
  final controllerPattern = RegExp(r'(\w+Controller)\s+(\w+)\s*=');
  final disposePattern = RegExp(r'(\w+)\.dispose\s*\(\s*\)');
  
  // –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–∞ State
  final stateClassPattern = RegExp(r'class\s+\w+\s+extends\s+State<');
  final hasStateClass = stateClassPattern.hasMatch(content);
  
  if (!hasStateClass) {
    return issues; // –ù–µ State –∫–ª–∞—Å—Å
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SafeStateMixin
  final usesSafeMixin = RegExp(r'with\s+.*SafeStateMixin').hasMatch(content);
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ setState –ø–æ—Å–ª–µ await
  for (final match in setStatePattern.allMatches(content)) {
    final lineNumber = _getLineNumber(content, match.start);
    final line = lines[lineNumber - 1].trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ mounted –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
    final contextStart = (match.start - 200).clamp(0, content.length);
    final contextEnd = (match.end + 100).clamp(0, content.length);
    final context = content.substring(contextStart, contextEnd);
    
    if (!context.contains('mounted') && !usesSafeMixin) {
      issues.add(Issue(
        type: IssueType.setStateAfterAwait,
        line: lineNumber,
        description: 'setState after await without mounted check',
        code: line,
        fix: 'Add: if (mounted) { setState(...) }',
      ));
    }
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ StreamSubscription
  final streamVars = <String>{};
  for (final match in streamPattern.allMatches(content)) {
    final varMatch = RegExp(r'(\w+)\s*=\s*').firstMatch(
      content.substring((match.start - 50).clamp(0, content.length), match.start)
    );
    
    if (varMatch != null) {
      streamVars.add(varMatch.group(1)!);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø–∏—Å–∫—É
  final canceledVars = <String>{};
  for (final match in cancelPattern.allMatches(content)) {
    final varName = match.group(1);
    if (varName != null) {
      canceledVars.add(varName);
    }
  }
  
  final unsubscribed = streamVars.difference(canceledVars);
  if (unsubscribed.isNotEmpty && !usesSafeMixin) {
    for (final varName in unsubscribed) {
      issues.add(Issue(
        type: IssueType.unsubscribedStream,
        line: 0, // –°–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
        description: 'StreamSubscription "$varName" not canceled',
        code: '$varName.listen(...)',
        fix: 'Add to dispose(): $varName.cancel();',
      ));
    }
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Timer
  final hasTimer = timerPattern.hasMatch(content);
  final hasTimerCancel = content.contains('timer.cancel()') || 
                         content.contains('timer?.cancel()');
  
  if (hasTimer && !hasTimerCancel && !usesSafeMixin) {
    issues.add(Issue(
      type: IssueType.uncanceledTimer,
      line: 0,
      description: 'Timer not canceled',
      code: 'Timer(...)',
      fix: 'Store timer reference and cancel in dispose()',
    ));
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Controller
  final controllers = <String>{};
  for (final match in controllerPattern.allMatches(content)) {
    controllers.add(match.group(2)!);
  }
  
  final disposedControllers = <String>{};
  for (final match in disposePattern.allMatches(content)) {
    disposedControllers.add(match.group(1)!);
  }
  
  final undisposed = controllers.difference(disposedControllers);
  if (undisposed.isNotEmpty && !usesSafeMixin) {
    for (final controller in undisposed) {
      issues.add(Issue(
        type: IssueType.undisposedController,
        line: 0,
        description: 'Controller "$controller" not disposed',
        code: '$controller = ...Controller()',
        fix: 'Add to dispose(): $controller.dispose();',
      ));
    }
  }
  
  return issues;
}

/// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ
String _fixIssues(String content, List<Issue> issues) {
  String fixedContent = content;
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã
  issues.sort((a, b) => b.line.compareTo(a.line));
  
  for (final issue in issues) {
    switch (issue.type) {
      case IssueType.setStateAfterAwait:
        // –ó–∞–º–µ–Ω—è–µ–º setState –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        fixedContent = fixedContent.replaceAllMapped(
          RegExp(r'setState\s*\('),
          (match) => 'if (mounted) setState(',
        );
        break;
        
      case IssueType.unsubscribedStream:
      case IssueType.uncanceledTimer:
      case IssueType.undisposedController:
        // –î–ª—è —ç—Ç–∏—Ö –ø—Ä–æ–±–ª–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SafeStateMixin
        if (!fixedContent.contains('SafeStateMixin')) {
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
          final importIndex = fixedContent.lastIndexOf('import ');
          final importEnd = fixedContent.indexOf(';', importIndex) + 1;
          
          fixedContent = fixedContent.replaceRange(
            importEnd,
            importEnd,
            "\nimport '../core/mixins/safe_state_mixin.dart';",
          );
          
          // –î–æ–±–∞–≤–ª—è–µ–º mixin
          fixedContent = fixedContent.replaceFirstMapped(
            RegExp(r'(class\s+\w+State\s+extends\s+State<[^>]+>)'),
            (match) => '${match.group(1)} with SafeStateMixin',
          );
        }
        break;
    }
  }
  
  return fixedContent;
}

/// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏
int _getLineNumber(String content, int offset) {
  return '\n'.allMatches(content.substring(0, offset)).length + 1;
}

/// –í—ã–≤–æ–¥ –ø—Ä–æ–±–ª–µ–º
void _printIssues(Map<String, List<Issue>> issues, bool verbose) {
  issues.forEach((file, fileIssues) {
    print('\n  $file:');
    
    for (final issue in fileIssues) {
      if (issue.line > 0) {
        print('    Line ${issue.line}: ${issue.description}');
      } else {
        print('    ${issue.description}');
      }
      
      if (verbose) {
        print('      Code: ${issue.code}');
        print('      Fix: ${issue.fix}');
      }
    }
  });
}

/// –ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
class Issue {
  final IssueType type;
  final int line;
  final String description;
  final String code;
  final String fix;
  
  Issue({
    required this.type,
    required this.line,
    required this.description,
    required this.code,
    required this.fix,
  });
}

/// –¢–∏–ø—ã –ø—Ä–æ–±–ª–µ–º
enum IssueType {
  setStateAfterAwait,
  unsubscribedStream,
  uncanceledTimer,
  undisposedController,
}
