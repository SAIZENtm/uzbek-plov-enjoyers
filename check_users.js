// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Firestore
const https = require('https');

async function checkUser(userId) {
  const url = `https://us-central1-newport-23a19.cloudfunctions.net/searchUsers?query=${userId}`;
  
  return new Promise((resolve, reject) => {
    https.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          resolve(result);
        } catch (e) {
          resolve({ error: 'Invalid JSON', data });
        }
      });
    }).on('error', (error) => {
      reject(error);
    });
  });
}

async function checkAllUsers() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Firestore...\n');
  
  // –°–ø–∏—Å–æ–∫ ID –∏–∑ –ª–æ–≥–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
  const userIds = [
    'AA2807040',
    'AD0066548', 
    'AD2427427',
    'AA2005264',
    'AD2100470',
    'AD1914183',
    'AA3599472'
  ];
  
  for (const userId of userIds) {
    try {
      console.log(`üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
      const result = await checkUser(userId);
      
      if (result.users && result.users.length > 0) {
        const user = result.users[0];
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω!`);
        console.log(`   üì± FCM —Ç–æ–∫–µ–Ω–æ–≤: ${user.fcmTokens?.length || 0}`);
        console.log(`   üè† –ë–ª–æ–∫: ${user.blockId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   üö™ –ö–≤–∞—Ä—Ç–∏—Ä–∞: ${user.apartmentNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`   üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      } else {
        console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users`);
      }
      console.log('');
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
    }
  }
}

console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:');
console.log('');
console.log('–ö–æ–ª–ª–µ–∫—Ü–∏—è: users');
console.log('–î–æ–∫—É–º–µ–Ω—Ç: [–Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞]');
console.log('–ü–æ–ª—è:');
console.log('  ‚îú‚îÄ‚îÄ fcmTokens: [–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫]');
console.log('  ‚îú‚îÄ‚îÄ lastTokenUpdate: timestamp');
console.log('  ‚îú‚îÄ‚îÄ blockId: string');
console.log('  ‚îú‚îÄ‚îÄ apartmentNumber: string');
console.log('  ‚îî‚îÄ‚îÄ phone: string');
console.log('');
console.log('üîß –î–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
console.log('collection("users").doc(passportNumber)');
console.log('');

checkAllUsers().then(() => {
  console.log('üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  console.log('');
  console.log('üí° –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:');
  console.log('1. –í–æ–π–¥–∏—Ç–µ –≤ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
  console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: firebase functions:log');
  console.log('3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É');
}); 